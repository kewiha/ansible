### Common with setup-ansible_linux.yml ###
- name: configure ssh-user group, pubkeys, PATH for {{ item }}
  include_tasks: common-setup-run-linux.yml
  loop: "{{ admin_users }}"

### network ###
- tags: network
  block:
  - name: "configure /etc/hosts: line 1"
    lineinfile:
      path: /etc/hosts
      regexp: '^127.0.0.1.*'
      line: "127.0.0.1	localhost"
  - name: "configure /etc/hosts: line 2"
    lineinfile:
      path: /etc/hosts
      regexp: '^127.0.1.1.*'
      line: "127.0.1.1	{{ ansible_hostname }}"
  - name: "configure /etc/hosts: line 3"
    lineinfile:
      path: /etc/hosts
      regexp: '^::1.*'
      line: "::1		localhost ip6-localhost ip6-loopback"
  - name: "configure /etc/hosts: line 4"
    lineinfile:
      path: /etc/hosts
      regexp: '^ff02::1.*'
      line: "ff02::1		ip6-allnodes"
  - name: "configure /etc/hosts: line 5"
    lineinfile:
      path: /etc/hosts
      regexp: '^ff02::2.*'
      line: "ff02::2		ip6-allrouters"


### apt and packages ###
- tags: apt
  block:
  - name: remove debian backports repos from apt
    replace:
      path: /etc/apt/sources.list 
      regexp: '.*backports.*'
  - name: remove deb-src repos from apt
    replace:
      path: /etc/apt/sources.list
      regexp: '^deb-src.*'
  - name: Remove comments from apt sources
    replace:
      path: /etc/apt/sources.list
      regexp: '^#.*'
  - name: Remove blank lines from apt sources
    replace: 
      path: /etc/apt/sources.list
      regexp: '^\s*\n'
  - name: add contrib and non-free repos to apt (debian)
    lineinfile:
      path: /etc/apt/sources.list
      regexp: '^deb http[s]*://deb.debian.org/debian.*{{ target_distribution_release }} main.*'
      line: deb https://deb.debian.org/debian bullseye main contrib non-free
  - name: add contrib and non-free repos to apt (debian-security)
    lineinfile:
      path: /etc/apt/sources.list
      regexp: '^deb http[s]*://security.debian.org/debian-security.*{{ target_distribution_release }}-security main.*'
      line: "deb https://security.debian.org/debian-security {{ target_distribution_release }}-security main contrib non-free"
  - name: add contrib and non-free repos to apt (updates)
    lineinfile:
      path: /etc/apt/sources.list
      regexp: '^deb http[s]*://deb.debian.org/debian.*{{ target_distribution_release }}-updates main.*'
      line: 'deb https://deb.debian.org/debian {{ target_distribution_release }}-updates main contrib non-free'
  - name: install apt updates
    apt:
      update_cache: yes
      cache_valid_time: 3600
      upgrade: safe
      autoremove: true
      autoclean: true
    when: ansible_distribution == "Debian"

- name: install debian common packages
  tags: apt
  apt:
    name: "{{ debian_packages_common }}"
    state: latest
    update_cache: yes
    cache_valid_time: 3600

- name: install debian intel CPU specific packages
  tags: apt
  apt:
    name: "{{ debian_packages_cpu_intel }}"
    state: latest
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_processor[1] == "GenuineIntel"
    # ansible_processor[1] could be an unreliable way to get this. May have to use shell: to cat /proc/cpuinfo changed_when: false, and register: to get reliable CPU vendor
- name: install debian AMD CPU specific packages
  tags: apt
  apt:
    name: "{{ debian_packages_cpu_amd }}"
    state: latest
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_processor[1] == "AuthenticAMD"
  # ansible_processor[1] could be an unreliable way to get this. May have to use shell: to cat /proc/cpuinfo changed_when: false, and register: to get reliable CPU vendor

- name: configure unattended-upgrades
  tags: apt
  block:
    - name: enable unattended-upgrades
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        regexp: |
          '^APT.*Periodic.*Unattended-Upgrade'
        line: "APT::Periodic::Unattended-Upgrade \"1\";"
    - name: configure unattended-upgrades 
      blockinfile: 
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        block: |
          Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
          Unattended-Upgrade::MinimalSteps "true";
          Unattended-Upgrade::OnlyOnACPower "true";
          Unattended-Upgrade::SyslogFacility "daemon";
          Unattended-Upgrade::Skip-Updates-On-Metered-Connections "true";
          Unattended-Upgrade::Verbose "false";
          Unattended-Upgrade::Mail "root";
          Unattended-Upgrade::MailReport "on-error";
          Unattended-Upgrade::SyslogEnable "true";
          Unattended-Upgrade::SyslogFacility "daemon";

### Localization and Input ###
- name: disable annoying bell
  tags: input
  lineinfile:
    path: /etc/inputrc
    regexp: '.*set bell-style.*'
    line: "set bell-style none"

- name: set keyboard layout (requires reboot)
  tags: input,locale
  block:
    - name: set XKBMODEL
      lineinfile:
        path: /etc/default/keyboard
        regexp: '^XKBMODEL=.*'
        line: |
          XKBMODEL="pc104"
        create: true
    - name: set XKBLAYOUT
      lineinfile:
        path: /etc/default/keyboard
        regexp: '^XKBLAYOUT=.*'
        line: |
          XKBLAYOUT="us"
        create: true
    - name: set XKBVARIANT
      lineinfile:
        path: /etc/default/keyboard
        regexp: '^XKBVARIANT=.*'
        line: |
          XKBVARIANT=""
        create: true
    - name: set XKBOPTIONS
      lineinfile:
        path: /etc/default/keyboard
        regexp: '^XKBOPTIONS=.*'
        line: |
          XKBOPTIONS=""
        create: true
    - name: set BACKSPACE mode
      lineinfile:
        path: /etc/default/keyboard
        regexp: '^BACKSPACE=.*'
        line: |
          BACKSPACE="guess"
        create: true

- name: generate locale
  tags: locale
  block:
    - name: Remove comments from locale.gen
      replace:
        path: /etc/locale.gen
        regexp: '^#.*'
    - name: Remove blank lines from locale.gen
      replace:
        path: /etc/locale.gen
        regexp: '^\s*\n'
    - name: add en_CA UTF8 to locale.gen
      lineinfile:
        path: /etc/locale.gen
        regexp: '.*en_CA.UTF-8 UTF-8'
        line: |
          en_CA.UTF-8 UTF-8
        create: true
      notify: locale_gen
    - name: add en_US UTF8 to locale.gen
      lineinfile:
        path: /etc/locale.gen
        regexp: '.*en_US.UTF-8 UTF-8'
        line: |
          en_US.UTF-8 UTF-8
        create: true
      notify: locale_gen
    - name: add LANG to default locale
      lineinfile: 
         path: /etc/default/locale
         regexp: '^LANG=.*'
         line: |
           LANG="en_CA.UTF-8"
         create: true
      notify: locale_gen
    - name: add LANGUAGE to default locale
      lineinfile:
         path: /etc/default/locale
         regexp: '^LANGUAGE=.*'
         line: |
           LANGUAGE="en_CA:en"
         create: true
      notify: locale_gen

- name: check timezone, RTC, and NTP are ok
  tags: locale,time
  shell: 
    cmd: |
      timedatectl
  register: timedatectl_out
  changed_when: false 
- name: set timezone, RTC, NTP
  tags: locale,time
  block: 
    - name: set NTP server
      shell:
        cmd: |
          timedatectl set-ntp 1
      when: "'NTP service: n/a' in timedatectl_out.stdout"
    - name: set timezone
      shell:
        cmd: | 
          timedatectl set-timezone America/Toronto
      when: "'America/Toronto' not in timedatectl_out.stdout"
    - name: set RTC mode to UTC
      shell: 
        cmd: | 
          timedatectl set-local-rtc 0 --adjust-system-clock
      when: "'RTC in local TZ: yes' in timedatectl_out.stdout"      

### security ###
- name: check for root account, disable if found
  tags: security
  shell:
    cmd: |
      [ "$(cat /etc/shadow | grep '^root:' | grep -c '^root:!:' )" == "1" ]; echo $?
  register: root_enabled
  changed_when: false
- name: disable root account
  tags: security
  shell:
    cmd: |
      [ "$(passwd -ldq root && cat /etc/shadow | grep '^root:' | grep -c '^root:!:' )" == "1" ]; echo $?
  when: root_enabled.stdout == "1"

- name: configure fail2ban
  tags: security
  block:
    - name: configure jail.local
      block:
        - name: copy jail.conf to .local
          copy:
            src: /etc/fail2ban/jail.conf
            dest: /etc/fail2ban/jail.local
            remote_src: true
            force: false
          notify: restart_fail2ban
        - name: change jail.conf default ban time
          lineinfile:
            path: /etc/fail2ban/jail.local
            regexp: '^bantime\ *=.*'
            line: |
              bantime  = 10m
          notify: restart_fail2ban
        - name: change jail.conf default findtime
          lineinfile:
            path: /etc/fail2ban/jail.local
            regexp: '^findtime\ *=.*'
            line: |
              findtime  = 10m
          notify: restart_fail2ban
        - name: change jail.conf backend
          lineinfile: 
            path: /etc/fail2ban/jail.local
            regexp: '^backend\ *=.*'
            line: |
              backend = systemd
          notify: restart_fail2ban  
    - name: configure fail2ban.local
      block:
        - name: copy fail2ban.conf to .local
          copy:
            src: /etc/fail2ban/fail2ban.conf
            dest: /etc/fail2ban/fail2ban.local
            remote_src: true
            force: false
          notify: restart_fail2ban
        - name: set fail2ban.local loglevel
          lineinfile:
            path: /etc/fail2ban/fail2ban.local
            regexp: '^loglevel\ =.*'
            line: |
              loglevel = INFO
          notify: restart_fail2ban
        - name: set fail2ban.local logtarget
          lineinfile:
            path: /etc/fail2ban/fail2ban.local
            regexp: '^logtarget\ =.*'
            line: |
              logtarget = /var/log/fail2ban.log
          notify: restart_fail2ban

- name: configure sshd
  tags: security
  block:
    - name: add admin users to ssh-user group
      block:
        - name: create ssh-user group
          group:
            name: ssh-user
            state: present
        - name: add admins to ssh-user group
          user:
            name: "{{ item }}"
            groups: ssh-user
            append: true
          loop: "{{ admin_users }}"
        - name: lock down sshd_config
          template:
            src: sshd_config.j2
            dest: /etc/ssh/sshd_config
            owner: root
            group: root
            mode: 0644
          register: sshd_config_changed
        - name: check if default ssh host keys exist
          stat:
            path: /etc/ssh/ssh_host_ecdsa_key
            get_checksum: false
            get_attributes: false
            get_mime: false
          register: ssh_default_host_keys
        - name: replace ssh host keys if needed
          when: ssh_default_host_keys.stat.exists
          block:
            - name: delete default ssh host keys
              file:
                path: "{{ item }}"
                state: absent
              loop: "{{ sshd_host_key_paths }}"              
            - name: generate ssh ed25519 host key
              shell:
                cmd: |
                  ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""                
            - name: generate ssh rsa host key
              shell:
                cmd: |
                  ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ""      
        - name: reload sshd if needed
          service:
            name: sshd
            enabled: true
            state: reloaded
          when: sshd_config_changed.changed
